package it.univaq.disim.se.masaccio.producer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import it.univaq.disim.se.masaccio.entity.MessageList;
import org.apache.log4j.Logger;

import it.univaq.disim.se.masaccio.util.PropertyFileReader;
import it.univaq.disim.se.masaccio.entity.IoTRoomData;

import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;


public class IoTDataProducer {

	public static void main(String[] args) throws Exception {
		//read config file
		Properties prop = PropertyFileReader.readPropertyFile();		
		String zookeeper = prop.getProperty("com.iot.app.kafka.zookeeper");
		String brokerList = prop.getProperty("com.iot.app.kafka.brokerlist");
		String topic = prop.getProperty("com.iot.app.kafka.topic");
		logger.info("Using Zookeeper=" + zookeeper + " ,Broker-list=" + brokerList + " and topic " + topic);

		// set producer properties
		Properties properties = new Properties();
		properties.put("zookeeper.connect", zookeeper);
		properties.put("metadata.broker.list", brokerList);
		properties.put("request.required.acks", "1");
		properties.put("serializer.class", "it.univaq.disim.se.masaccio.util.IoTDataEncoder");
		//generate event
		Producer<String, IoTRoomData> producer = new Producer<String, IoTRoomData>(new ProducerConfig(properties));
		IoTDataProducer iotProducer = new IoTDataProducer();
		iotProducer.generateIoTEvent(producer,topic);
		
		while(true){
			
		}
	}


}
