package it.univaq.disim.se.masaccio.producer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import it.univaq.disim.se.masaccio.entity.MessageList;
import org.apache.log4j.Logger;

import it.univaq.disim.se.masaccio.util.PropertyFileReader;
import it.univaq.disim.se.masaccio.entity.IoTRoomData;

import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;


public class IoTDataProducer {
	
	private static final Logger logger = Logger.getLogger(IoTDataProducer.class);

	public static void main(String[] args) throws Exception {
		//read config file
		Properties prop = PropertyFileReader.readPropertyFile();		
		String zookeeper = prop.getProperty("com.iot.app.kafka.zookeeper");
		String brokerList = prop.getProperty("com.iot.app.kafka.brokerlist");
		String topic = prop.getProperty("com.iot.app.kafka.topic");
		logger.info("Using Zookeeper=" + zookeeper + " ,Broker-list=" + brokerList + " and topic " + topic);

		// set producer properties
		Properties properties = new Properties();
		properties.put("zookeeper.connect", zookeeper);
		properties.put("metadata.broker.list", brokerList);
		properties.put("request.required.acks", "1");
		properties.put("serializer.class", "it.univaq.disim.se.masaccio.util.IoTDataEncoder");
		//generate event
//		Producer<String, IoTRoomData> producer = new Producer<String, IoTRoomData>(new ProducerConfig(properties));
//		IoTDataProducer iotProducer = new IoTDataProducer();
//		iotProducer.generateIoTEvent(producer,topic);		
		MessageList test = new MessageList();
		test.setId("123");
		test.setIdSender(1);
		test.setText("test");
		test.setTimestamp(new Date());
		IoTDataProducer iotProducer = new IoTDataProducer();
		iotProducer.generateMessage(test, "firstResponderCommunication");
	}


	/**
	 * Method runs in while loop and generates random IoT data in JSON with below format. 
	 * 
	 * {"room": "1", "timestamp":1465471124373, "numberOfPeople": 45}
	 * 
	 * @throws InterruptedException 
	 * 
	 * 
	 */
	private void generateIoTEvent(Producer<String, IoTRoomData> producer, String topic) throws InterruptedException {
		Random random = new Random();
		logger.info("Sending events");
		int min = 40;						//Minimum number of visitors in a room
		int max = 80;						//Maximum number of visitors in a room
		// generate event in loop
		while (true) {
			List<IoTRoomData> eventList = new ArrayList<IoTRoomData>();
			for (int roomId = 0; roomId < 10; roomId++) {									// create events for ten different rooms
				int numberOfPeople = random.nextInt((max - min) + 1) + min;
				Date timestamp = new Date();
				IoTRoomData event = new IoTRoomData(Integer.toString(roomId), timestamp, numberOfPeople);
				eventList.add(event);
			}
			Collections.shuffle(eventList);// shuffle for random events
			for (IoTRoomData event : eventList) {
				KeyedMessage<String, IoTRoomData> data = new KeyedMessage<String, IoTRoomData>(topic, event);
				producer.send(data);
			}
			//Thread.sleep(random.nextInt(3000 - 1000) + 1000);   //random delay of 1 to 3 seconds
			Thread.sleep(10000);
		}
	}

	public void generateMessage(MessageList message, String topic) throws Exception {
		System.setSecurityManager(null);
		MessageList test = new MessageList();
		test.setId(message.getId());
		test.setIdSender(message.getIdSender());
		test.setText(message.getText());
		test.setTimestamp(message.getTimestamp());
		
		Properties prop = PropertyFileReader.readPropertyFile();		
		String zookeeper = prop.getProperty("com.iot.app.kafka.zookeeper");
		String brokerList = prop.getProperty("com.iot.app.kafka.brokerlist");
		logger.info("Using Zookeeper=" + zookeeper + " ,Broker-list=" + brokerList + " and topic " + topic);

		// set producer properties
		Properties properties = new Properties();
		properties.put("zookeeper.connect", zookeeper);
		properties.put("metadata.broker.list", brokerList);
		properties.put("request.required.acks", "1");
		properties.put("serializer.class", "it.univaq.disim.se.masaccio.util.MessageDataEncoder");
		properties.put("key.serializer.class", "kafka.serializer.StringEncoder");
		//generate event
		Producer<String, MessageList> producer = new Producer<String, MessageList>(new ProducerConfig(properties));
		KeyedMessage<String, MessageList> data = new KeyedMessage<String, MessageList>(topic, test);
		producer.send(data);
	}
}
